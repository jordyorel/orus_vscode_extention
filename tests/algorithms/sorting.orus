struct Sorter {}

impl Sorter {
    fn bubble_sort(arr: [i32; 8]) -> [i32; 8] {
        let n: i32 = 8
        let i: i32 = 0
        let j: i32 = 0
        let temp: i32 = 0
        let swapped: bool = false
        
        // Create a copy to maintain immutability of original array
        let sorted: [i32; 8] = [0, 0, 0, 0, 0, 0, 0, 0]
        for i in 0..n {
            sorted[i] = arr[i]
        }
        
        // Bubble sort algorithm
        for i in 0..n-1 {
            swapped = false
            for j in 0..n-i-1 {
                if sorted[j] > sorted[j+1] {
                    // Swap elements
                    temp = sorted[j]
                    sorted[j] = sorted[j+1]
                    sorted[j+1] = temp
                    swapped = true
                }
            }
            
            // If no swaps were made in this pass, array is sorted
            if swapped == false {
                break
            }
        }
        
        return sorted
    }
    
    fn selection_sort(arr: [i32; 8]) -> [i32; 8] {
        let n: i32 = 8
        let i: i32 = 0
        let j: i32 = 0
        let min_idx: i32 = 0
        let temp: i32 = 0
        
        // Create a copy to maintain immutability of original array
        let sorted: [i32; 8] = [0, 0, 0, 0, 0, 0, 0, 0]
        for i in 0..n {
            sorted[i] = arr[i]
        }
        
        // Selection sort algorithm
        for i in 0..n-1 {
            min_idx = i
            
            for j in i+1..n {
                if sorted[j] < sorted[min_idx] {
                    min_idx = j
                }
            }
            
            // Swap the found minimum element with the element at index i
            if min_idx != i {
                temp = sorted[i]
                sorted[i] = sorted[min_idx]
                sorted[min_idx] = temp
            }
        }
        
        return sorted
    }
    
    fn is_sorted(arr: [i32; 8]) -> bool {
        let i: i32 = 1
        while i < 8 {
            if arr[i-1] > arr[i] {
                return false
            }
            i = i + 1
        }
        return true
    }
}

fn array_to_string(arr: [i32; 8]) -> string {
    let result: string = "["
    for i in 0..8 {
        result = result + arr[i]
        if i < 7 {
            result = result + ", "
        }
    }
    result = result + "]"
    return result
}

// Test arrays to sort
let unsorted1: [i32; 8] = [64, 34, 25, 12, 22, 11, 90, 5]
let unsorted2: [i32; 8] = [5, 1, 4, 2, 8, 9, 3, 7]

// Sort and print results
print("Original array 1: {}", array_to_string(unsorted1))
let bubble_sorted: [i32; 8] = bubble_sort(unsorted1)
print("Bubble sorted: {}", array_to_string(bubble_sorted))
print("Is bubble sorted: {}", is_sorted(bubble_sorted))

print("Original array 2: {}", array_to_string(unsorted2))
let selection_sorted: [i32; 8] = selection_sort(unsorted2)
print("Selection sorted: {}", array_to_string(selection_sorted))
print("Is selection sorted: {}", is_sorted(selection_sorted))
