{
  "scopeName": "source.orus",
  "name": "Orus",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#builtins"
    },
    {
      "include": "#generics"
    },
    {
      "name": "entity.name.type.struct.orus",
      "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
    },
    {
      "name": "entity.name.function.orus",
      "match": "\\b[a-z][A-Za-z0-9_]*(?=\\s*\\()"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.orus",
          "match": "//.*$"
        },
        {
          "name": "comment.block.orus",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": { "name": "punctuation.definition.comment.orus" }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.orus",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escape.orus"
            },
            {
              "name": "meta.interpolation.orus",
              "match": "{\\s*}",
              "captures": {
                "0": { "name": "constant.character.format.placeholder.orus" }
              }
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.orus",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.orus",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.orus",
          "match": "\\b(fn|return|let|struct|impl|for|in|while|if|elif|else|break|continue|import|try|catch|match)\\b"
        },
        {
          "name": "keyword.operator.logical.orus",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "constant.language.boolean.orus",
          "match": "\\b(true|false|nil)\\b"
        },
        {
          "name": "keyword.operator.range.orus",
          "match": "\\.\\."
        },
        {
          "name": "keyword.operator.match.orus",
          "match": "=>"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.orus",
          "match": "\\b(i32|u32|f64|bool|string)\\b"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "variable.language.self.orus",
          "match": "\\bself\\b"
        },
        {
          "name": "support.function.builtin.orus",
          "match": "\\b(print|len|substring|push|pop|range|type_of|is_type|input|int|float)\\b"
        }
      ]
    },
    "generics": {
      "patterns": [
        {
          "name": "meta.generic.orus",
          "begin": "<",
          "end": ">",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.generic.begin.orus" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.generic.end.orus" }
          },
          "patterns": [
            { "include": "#types" }
          ]
        }
      ]
    }
  }
}
